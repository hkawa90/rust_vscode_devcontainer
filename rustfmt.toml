# rustfmt --print-config default rustfmt.toml 

# [Rustのコード整形ツールrustfmtのオプションについて #Rust - Qiita](https://qiita.com/wordijp/items/6860e27643ba9d06a987)
# [rustfmt/Configurations.md at master · rust-lang/rustfmt](https://github.com/rust-lang/rustfmt/blob/master/Configurations.md#array_width)
## 最大幅、行のコード幅をこの幅以内に収めようとする
max_width = 100
## indentにタブを使うか
hard_tabs = false
## インデントのスペース数
tab_spaces = 4
## 改行コード。Windows:CRLF、Unix:LF、Native:OSにより自動判定
newline_style = "Auto"
## 式や項目のインデント形式を指定(Block, Visual)
indent_style = "Block"
## Whether to use different formatting for items and expressions if they satisfy a heuristic notion of 'small'. Default/Off/Max
use_small_heuristics = "Default"
## 関数の引数幅、これより大きいと縦に並べる
fn_call_width = 60
## Maximum width of the args of a function-like attributes before falling back to vertical formatting.
attr_fn_like_width = 70
## structのリテラル幅、これより大きいと縦に並べる
struct_lit_width = 18
## Maximum width in the body of a struct variant before falling back to vertical formatting. A value of 0 (zero) results in struct literals always being broken into multiple lines. Note this occurs when use_small_heuristics is set to Off.
struct_variant_width = 35
## Maximum width of an array literal before falling back to vertical formatting.
array_width = 60
## Maximum width of a chain to fit on one line.
chain_width = 60
## Maximum line length for single line if-else expressions. A value of 0 (zero) results in if-else expressions always being broken into multiple lines. Note this occurs when use_small_heuristics is set to Off.
single_line_if_else_max_width = 50
## Maximum line length for single line let-else statements. See the let-else statement section of the Rust Style Guide for more details on when a let-else statement may be written on a single line. A value of 0 (zero) means the divergent else block will always be formatted over multiple lines. Note this occurs when use_small_heuristics is set to Off.
single_line_let_else_max_width = 50
## コメントをmax_width・ideal_width幅以内に収めるか
wrap_comments = false
## Format code snippet included in doc comments.
format_code_in_doc_comments = false
## Max width for code snippets included in doc comments. Only used if format_code_in_doc_comments is true.
doc_comment_code_block_width = 100
## Maximum length of comments. No effect unless wrap_comments = true.
comment_width = 80
## Convert /* */ comments to // comments where possible
normalize_comments = false
## Convert #![doc] and #[doc] attributes to //! and /// doc comments.
normalize_doc_attributes = false
## max_width幅が足りない時、stringリテラルを整形する
format_strings = false
## Format the metavariable matching patterns in macros.
format_macro_matchers = false
## Format the bodies of declarative macro definitions.
format_macro_bodies = true
## Skip formatting the bodies of macro invocations with the following names.
skip_macro_invocations = []
## Control the case of the letters in hexadecimal literal values
hex_literal_case = "Preserve"
## Put empty-body functions and impls on a single line
empty_item_single_line = true
## Put small struct literals on a single line
struct_lit_single_line = true
## 一行処理の関数を一行にする
fn_single_line = false
## Forces the where clause to be laid out on a single line.
where_single_line = false
## Indent style of imports
imports_indent = "Block"
## Item layout inside a imports block
imports_layout = "Mixed"
## Controls how imports are structured in use statements. Imports will be merged or split to the configured level of granularity.
imports_granularity = "Preserve"
## Controls the strategy for how consecutive imports are grouped together.
group_imports = "Preserve"
## use {YYY, XXX};の順番をアルファベット順にするか、大文字が優先
reorder_imports = true
## Reorder mod declarations alphabetically in group.
reorder_modules = true
## Reorder mod declarations alphabetically in group.
reorder_impl_items = false
## struct・enum等へのGenericsのデフォルト型やbuiltin trait指定時の「=」や「+」の空白について。Compressed: 空白なし、Wide: 空白あり
type_punctuation_density = "Wide"
## Leave a space before the colon.
space_before_colon = false
## Leave a space after the colon.
space_after_colon = true
## Put spaces around the .., ..=, and ... range operators
spaces_around_ranges = false
## Where to put a binary operator when a binary expression goes multiline.
binop_separator = "Front"
## Remove nested parens.
remove_nested_parens = true
## Combine control expressions with function calls.
combine_control_expr = true
## The width threshold for an array element to be considered "short".
short_array_element_width_threshold = 10
## When structs, slices, arrays, and block/array-like macros are used as the last argument in an expression list, allow them to overflow (like blocks/closures) instead of being indented on a new line.
overflow_delimited_expr = false
struct_field_align_threshold = 0
## The maximum diff of width between struct fields to be aligned with each other.
enum_discrim_align_threshold = 0
## Controls whether arm bodies are wrapped in cases where the first line of the body cannot fit on the same line as the => operator.
match_arm_blocks = true
## Controls whether to include a leading pipe on match arms
match_arm_leading_pipes = "Never"
## Force multiline closure and match arm bodies to be wrapped in a block
force_multiline_blocks = false
## Control the layout of parameters in function signatures.
fn_params_layout = "Tall"
## Brace style for items
brace_style = "SameLineWhere"
## Brace style for control flow constructs
control_brace_style = "AlwaysSameLine"
## Add trailing semicolon after break, continue and return
trailing_semicolon = true
## How to handle trailing commas for lists
trailing_comma = "Vertical"
## match句でblockに常にカンマを付けるか
match_block_trailing_comma = false
## Maximum number of blank lines which can be put between items. If more than this number of consecutive empty lines are found, they are trimmed down to match this integer.
blank_lines_upper_bound = 1
## Minimum number of blank lines which must be put between items. If two items have fewer blank lines between them, additional blank lines are inserted.
blank_lines_lower_bound = 0
## Specifies which edition is used by the parser. "2015", "2018", "2021"
edition = "2015"
## Which version of the formatting rules to use. Version::One is backwards-compatible with Rustfmt 1.0. Other versions are only backwards compatible within a major version number. One, Two
version = "One"
## Write an item and its attribute on the same line if their combined width is below a threshold
inline_attribute_width = 0
## Format generated files. A file is considered generated if any of the first five lines contain a @generated comment marker. By default, generated files are reformatted, i. e. @generated marker is ignored. This option is currently ignored for stdin (@generated in stdin is ignored.)
format_generated_files = true
## Merge multiple derives into a single one.
merge_derives = true
## Replace uses of the try! macro by the ? shorthand
use_try_shorthand = false
## Use field initialize shorthand if possible.
use_field_init_shorthand = false
## Always print the abi for extern items
force_explicit_abi = true
## Replace strings of _ wildcards by a single .. in tuple patterns
condense_wildcard_suffixes = false
## Whether to use colored output or not.
color = "Auto"
## Require a specific version of rustfmt. If you want to make sure that the specific version of rustfmt is used in your CI, use this option.
required_version = "1.7.0"
## Enable unstable features on the unstable channel.
unstable_features = false
## Don't reformat anything.
disable_all_formatting = false
## 他のimportしたソースの整形をskipする
skip_children = false
## This option is deprecated and has been renamed to show_parse_errors to avoid confusion around the double negative default of hide_parse_errors=false.
hide_parse_errors = false
## Error if Rustfmt is unable to get all lines within max_width, except for comments and string literals. If this happens, then it is a bug in Rustfmt. You might be able to work around the bug by refactoring your code to avoid long/complex expressions, usually by extracting a local variable or using a shorter name.
error_on_line_overflow = false
## Error if unable to get comments or string literals within max_width, or they are left with trailing whitespaces.
error_on_unformatted = false
## Skip formatting files and directories that match the specified pattern. The pattern format is the same as .gitignore. Be sure to use Unix/forwardslash / style paths. This path style will work on all platforms. Windows style paths with backslashes \ are not supported.
ignore = []
## Internal option
emit_mode = "Files"
## Internal option, use --backup
make_backup = false
